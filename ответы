1. Процесс распространения событий в JavaScript
Event Propagation (распространение событий) — это механизм, который определяет, как события передаются между элементами DOM-дерева. В JavaScript существует три фазы распространения событий:
- Фаза захвата (Capturing Phase) — событие движется от корневого элемента к целевому.
- Целевая фаза (Target Phase) — событие достигает целевого элемента.
- Фаза всплытия (Bubbling Phase) — событие движется от целевого элемента обратно к корневому.

На практике это знание можно применять:
- При создании универсальных обработчиков для группы элементов через делегирование событий.
- При выборе оптимальной фазы для прикрепления обработчиков событий, например, когда нужно обработать клик по вложенным элементам.
- Для предотвращения распространения событий через stopPropagation().
- Для остановки выполнения последующих обработчиков через stopImmediatePropagation().

2. Promise в JavaScript
Promise — это специальный объект, который представляет результат асинхронной операции. Он может находиться в одном из трёх состояний:
- pending — ожидание выполнения
- fulfilled — успешное выполнение
- rejected — выполнение с ошибкой

Альтернативные способы обработки асинхронного кода:
- Callback-функции — традиционный способ, но может привести к «аду коллбэков».
- Async/await — современный синтаксический сахар над промисами.
- Генераторы с yield.

Event Loop играет ключевую роль в асинхронности:
- Управляет выполнением кода в однопоточной среде.
- Разделяет задачи на стек вызовов и очередь событий.
- Обеспечивает неблокирующее выполнение асинхронных операций.

3. ООП в JavaScript
Объектно-ориентированное программирование основано на четырёх ключевых принципах:
- Инкапсуляция — сокрытие деталей реализации.
- Наследование — возможность создавать новые классы на основе существующих.
- Полиморфизм — использование одного интерфейса для разных типов данных.
- Абстракция — выделение существенных характеристик объекта.

В JavaScript ООП реализуется через:
- Прототипное наследование.
- Классы - синтаксический сахар над прототипами.
- Конструкторы.
- Прототипы.

4. Обработка URL браузером
Процесс обработки URL включает следующие этапы:
- Ввод URL в адресную строку.
- DNS-поиск — преобразование доменного имени в IP-адрес.
- TCP-соединение с сервером.
- HTTP-запрос — отправка запроса на сервер.
- Получение ответа от сервера.
- Парсинг HTML.
- Построение DOM-дерева.
- Выполнение JavaScript.
- Рендеринг страницы.

Технологии для ускорения:

- HTTP/2 — мультиплексирование запросов.
- Service Workers — кэширование ресурсов.
- Prefetching — предварительная загрузка.
- CDN — распределение контента.

Возможные проблемы:
- CORS — ограничения междоменного взаимодействия.
- XSS — атаки внедрения скриптов.
- CSRF — подделка межсайтовых запросов.
- SSL/TLS — проблемы с шифрованием.

Для решения проблем используются:
- CSP — политика безопасности контента.
- HSTS — принудительное использование HTTPS.
- SameSite — управление cookie.